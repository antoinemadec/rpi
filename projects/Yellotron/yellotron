#!/usr/bin/python



#====================================
# imports
#====================================
import os
import subprocess as proc
from multiprocessing import Process, Queue
from time import *
import pdserver
import Adafruit_CharLCD as LCD



#====================================
# functions
#====================================
def parse_cfg(file_name, instru_idx):
    effect_dict     = {}
    cfg_file        = open (file_name)
    cfg             = cfg_file.read().splitlines()
    for line in cfg:
        if line[0] == '#':
            continue
        else:
            line_elts = line.split()
            if line_elts[0] == ("instru_" + str(instru_idx)):
              return line_elts[1:]
    return []


def print_lcd(q_print):
    while True:
        instru = q_print.get()
        # only consider last value
        while q_print.empty() == False:
            instru = q_print.get()
        lcd.clear()
        lcd.blink(False)
        lcd.message(instru)
        lcd.set_cursor(0,1)


def get_keys():
    idle = 1
    while True:
        next_idle = 0
        if lcd.is_pressed(LCD.DOWN):
            # send command to PD patch to get the MIDI controls value
            # so we can save them in the config file
            proc.check_call("echo '1;'  | pdsend 5000 localhost", shell=True)
        else:
            next_idle = 1
        if idle:
            sleep(.1)
        else:
            sleep(.01)
        idle = next_idle



#====================================
# exectution
#====================================
# list instruments
instru_nb       = 10
instru_name     = [None] * instru_nb
instru_name[0]  = "MKII Flute"
instru_name[1]  = "M300A"
instru_name[2]  = "M300B"
instru_name[3]  = "MKII Violin"
instru_name[4]  = "MKII Brass"
instru_name[5]  = "Cello"
instru_name[6]  = "String Section"
instru_name[7]  = "Combined Choir"
instru_name[8]  = "Woodwind"
instru_name[9]  = "GC3Brass"

# init LCD
lcd = LCD.Adafruit_CharLCDPlate()
lcd.clear()
lcd.set_color(1,1,1)
lcd.message("** Yellotron **\n");
lcd.message("***************");

# spawn pd server
q_cmd_from_pd = Queue()
p =  Process(target=pdserver.start, args=(5001, q_cmd_from_pd))
p.start()

# spawn pd
#proc.call("pd -nogui -midiaddindev /dev/midi1 -audioadddev 'USB PnP Sound Device' Yellotron.pd &", shell=True)
proc.call("pd -midiaddindev /dev/midi1 -audioadddev 'USB PnP Sound Device' Yellotron.pd &", shell=True)
sleep(5)

# spawn LCD printing
q_print = Queue()
p = Process(target=print_lcd, args=(q_print,))
p.start()

# spawn keyboard input
q_keys = Queue()
p = Process(target=get_keys)
p.start()

# read cmd from PD patch
instru_idx      = 0
q_print.put(str(instru_idx) + "-" + instru_name[instru_idx])
l_preset =  parse_cfg("config.txt", instru_idx)
if l_preset != []:
    # send MIDI control presets
    str_preset = ' '.join(str(e) for e in l_preset)
    proc.check_call("echo '0 " + str_preset + ";'  | pdsend 5000 localhost", shell=True)
while True:
    cmd_from_pd = q_cmd_from_pd.get()
    if "ctlin" in cmd_from_pd:
        # PD patch response with MIDI control values,
        # save them in config file
        proc.check_call("./bin/update_config " + str(instru_idx) + cmd_from_pd[5:], shell=True)
    elif "instru_idx" in cmd_from_pd:
        instru_idx = int(cmd_from_pd.split()[1].strip(";"))
        q_print.put(str(instru_idx) + "-" + instru_name[instru_idx])
        l_preset =  parse_cfg("config.txt", instru_idx)
        if l_preset != []:
            # send MIDI control presets
            str_preset = ' '.join(str(e) for e in l_preset)
            proc.check_call("echo '0 " + str_preset + ";'  | pdsend 5000 localhost", shell=True)
