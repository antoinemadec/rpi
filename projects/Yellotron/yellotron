#!/usr/bin/python



#====================================
# imports
#====================================
import os
import subprocess as proc
from multiprocessing import Process, Queue
from time import *
import Adafruit_CharLCD as LCD



#====================================
# parameters
#====================================
MAX_PARAM_VALUE = 512-1
PARAM_NAME_SIZE = 5
CFG_FILENAME    = "config.txt"
SCRIPT_DIR = os.path.dirname(__file__)



#====================================
# functions
#====================================
def clip(lo, x, hi):
    return max(lo, min(hi, x))


# TODO
def parse_cfg(file_name):
    effect_dict     = {}
    cfg_file        = open (file_name)
    cfg             = cfg_file.read().splitlines()
    for line in cfg:
        if line[0] == '#':
            continue
        else:
            line_elts = line.split(";")
            idx = 0
            for elt in line_elts:
                if idx == 0:
                    instru_name = elt.strip()
                    effect_dict[instru_name] = {}
                else:
                    eff_val = elt.split("=")
                    effect_dict[instru_name][eff_val[0].strip()] = eff_val[1].strip()
                idx = idx + 1
    print(effect_dict)


def get_next_state(instru_idx, key_pressed):
    global instru_nb
    save = 0
    if key_pressed == LCD.RIGHT:
        instru_idx = clip(0, instru_idx+1, instru_nb-1)
    elif key_pressed == LCD.LEFT:
        instru_idx = clip(0, instru_idx-1, instru_nb-1)
    elif key_pressed == LCD.DOWN:
        save = 1
    return (instru_idx, save)


def print_lcd(q_print):
    while True:
        instru = q_print.get()
        # only consider last value
        while q_print.empty() == False:
            instru = q_print.get()
        lcd.clear()
        lcd.blink(False)
        lcd.message(instru)
        lcd.set_cursor(0,1)


def get_keys(q):
    idle = 1
    while True:
        next_idle = 0
        if lcd.is_pressed(LCD.SELECT):
            q.put(LCD.SELECT)
        elif lcd.is_pressed(LCD.LEFT):
            q.put(LCD.LEFT)
        elif lcd.is_pressed(LCD.RIGHT):
            q.put(LCD.RIGHT)
        elif lcd.is_pressed(LCD.DOWN):
            q.put(LCD.DOWN)
        elif lcd.is_pressed(LCD.UP):
            q.put(LCD.UP)
        else:
            next_idle = 1
        if idle:
            sleep(.1)
        else:
            sleep(.01)
        idle = next_idle



#====================================
# exectution
#====================================
# list instruments
instru_nb       = 10
instru_name     = [None] * instru_nb
instru_name[0]  = "MKII Flute"
instru_name[1]  = "M300A"
instru_name[2]  = "M300B"
instru_name[3]  = "MKII Violin"
instru_name[4]  = "MKII Brass"
instru_name[5]  = "Cello"
instru_name[6]  = "String Section"
instru_name[7]  = "Combined Choir"
instru_name[8]  = "Woodwind"
instru_name[9]  = "GC3Brass"

# init LCD
lcd = LCD.Adafruit_CharLCDPlate()
lcd.clear()
lcd.set_color(1,1,1)
lcd.message("** Yellotron **\n");
lcd.message("***************");

# spawn pd server: will update_config whenever we receive something on port 5001
proc.check_call("./bin/pdserver 5001 ./bin/update_config &", shell=True)
sleep(1)

# spawn pd
proc.call("pd -nogui -midiaddindev /dev/midi1 -audioadddev 'USB PnP Sound Device' Yellotron.pd &", shell=True)
#proc.call("pd -midiaddindev /dev/midi1 -audioadddev 'USB PnP Sound Device' Yellotron.pd &", shell=True)
sleep(5)

# spawn LCD printing
q_print = Queue()
p = Process(target=print_lcd, args=(q_print,))
p.start()

# spawn keyboard input
q_keys = Queue()
p = Process(target=get_keys, args=(q_keys,))
p.start()

# state machine
state       = 0     # state is istru idx
next_state  = state
boot        = 1
while True:
    if boot == 0:
        key_pressed = q_keys.get()
        next_state  = get_next_state(state, key_pressed)[0]
    if next_state != state or boot:
        boot            = 0
        state           = next_state
        instru_idx      = state
        q_print.put(instru_name[instru_idx])
        proc.check_call("echo '0 " + str(instru_idx) + ";'  | pdsend 5000 localhost", shell=True)
